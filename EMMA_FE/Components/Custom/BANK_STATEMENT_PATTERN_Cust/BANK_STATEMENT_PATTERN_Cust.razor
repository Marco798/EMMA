@page "/BANK_STATEMENT_PATTERN_Cust"
@using EMMA.Commons
@using EMMA_BE.Generated
@using System.Reflection
@using System.Text.Json
@using System.Text
@using System.Text.RegularExpressions

@inject HttpClient Http
@rendermode InteractiveServer

<div>
    <div style="display: flex">
        <select value="@selectedField" @onchange=OnChangeSelectedField>
            <option value="">---</option>
            @foreach (BANK_STATEMENT_FIELD_Combo name in BANK_STATEMENT_FIELD_ComboValues.GetItems()) {
                <option value="@name.Value">@BANK_STATEMENT_FIELD_ComboValues.GetName(name.Value)</option>
            }
        </select>
        <select value="@selectedPattern">
            <option value="">---</option>
            @foreach (BANK_STATEMENT_PATTERN_Record _BANK_STATEMENT_PATTERN_Record in _BANK_STATEMENT_PATTERN_Record_List) {
                <option>@_BANK_STATEMENT_PATTERN_Record.PATTERN</option>
            }
        </select>
        <input type="button" value="New" />
    </div>
    <div style="display: flex">
        <label for="patternPosition">Position</label>
        @if (_BANK_STATEMENT_PATTERN_BaseRecord.FIELD == BANK_STATEMENT_FIELD_ComboValues.DESCRIPTION) {
            <select value="@_BANK_STATEMENT_PATTERN_BaseRecord.POSITION" @onchange=OnChangePatternPosition>
                @foreach (PATTERN_POSITION_Combo name in PATTERN_POSITION_ComboValues.GetItems()) {
                    <option value="@name.Value">@PATTERN_POSITION_ComboValues.GetName(name.Value)</option>
                }
            </select>
        }
        else {
            _BANK_STATEMENT_PATTERN_BaseRecord.POSITION = PATTERN_POSITION_ComboValues.ALL;
            <span style="padding: 0px 3px 0px 3px">ALL</span>
        }
        <label for="patternPosition">Name</label>
        <input type="text" id="PatternName" @bind=_BANK_STATEMENT_PATTERN_BaseRecord.PATTERN style="width: 300px" />
        <label for="patternPosition">Pattern</label>
        <input type="text" id="PatternValue" @bind=_BANK_STATEMENT_PATTERN_BaseRecord.ORIGINAL_VALUE style="width: 500px" />
        <input type="button" value="Save" @onclick=SavePattern />
    </div>
    <div>
        <input id="showMatched" type="checkbox" @bind=hideMatched />
        <label for="showMatched">Show matched values</label>
    </div>
    <div style="overflow:auto; white-space:nowrap;">
        <table>
            @foreach (KeyValuePair<string, string> value in values.OrderBy(x => x.Value)) {
                @if (!hideMatched || string.IsNullOrWhiteSpace(@value.Value)) {
                    <tr>
                        <td>@value.Key</td>
                        <td>@value.Value</td>
                    </tr>
                }
            }
        </table>
    </div>
</div>

@code {
    private string? selectedField { get; set; } = null;
    private string? selectedPattern { get; set; } = null;
    private bool hideMatched = false;

    private List<BANK_STATEMENT_PATTERN_Record> _BANK_STATEMENT_PATTERN_Record_List = [];
    private Dictionary<string, string> values = [];

    private BANK_STATEMENT_PATTERN_BaseRecord _BANK_STATEMENT_PATTERN_BaseRecord = new();

    private async Task OnChangeSelectedField(ChangeEventArgs? changeEventArgs) {
        try {
            selectedField = changeEventArgs?.Value?.ToString() ?? string.Empty;

            BANK_STATEMENT_PATTERN_NullRecord _BANK_STATEMENT_PATTERN_NullRecord = new();
            List<BANK_STATEMENT_Field> _BANK_STATEMENT_Field_List = [];

            if (string.IsNullOrWhiteSpace(selectedField!)) return;
            _BANK_STATEMENT_PATTERN_BaseRecord.FIELD = new(selectedField!);

            switch (_BANK_STATEMENT_PATTERN_BaseRecord.FIELD.Value) {
                case BANK_STATEMENT_FIELD_ComboValues._REASON:
                    _BANK_STATEMENT_PATTERN_NullRecord.FIELD = BANK_STATEMENT_FIELD_ComboValues.REASON;
                    _BANK_STATEMENT_Field_List = [BANK_STATEMENT_FieldValues.REASON];
                    break;
                case BANK_STATEMENT_FIELD_ComboValues._DESCRIPTION:
                    _BANK_STATEMENT_PATTERN_NullRecord.FIELD = BANK_STATEMENT_FIELD_ComboValues.DESCRIPTION;
                    _BANK_STATEMENT_Field_List = [BANK_STATEMENT_FieldValues.DESCRIPTION];
                    break;
                case BANK_STATEMENT_FIELD_ComboValues._TAG2:
                    _BANK_STATEMENT_PATTERN_NullRecord.FIELD = BANK_STATEMENT_FIELD_ComboValues.TAG2;
                    _BANK_STATEMENT_Field_List = [BANK_STATEMENT_FieldValues.TAG2];
                    break;
                case BANK_STATEMENT_FIELD_ComboValues._TAG3:
                    _BANK_STATEMENT_PATTERN_NullRecord.FIELD = BANK_STATEMENT_FIELD_ComboValues.TAG3;
                    _BANK_STATEMENT_Field_List = [BANK_STATEMENT_FieldValues.TAG3];
                    break;
                case BANK_STATEMENT_FIELD_ComboValues._TAG4:
                    _BANK_STATEMENT_PATTERN_NullRecord.FIELD = BANK_STATEMENT_FIELD_ComboValues.TAG4;
                    _BANK_STATEMENT_Field_List = [BANK_STATEMENT_FieldValues.TAG4];
                    break;
            }

            HttpResponseMessage response = await Http.PostAsJsonAsync(@"https://localhost:7062/BANK_STATEMENT_PATTERN/SelectWithSimpleCriteria", _BANK_STATEMENT_PATTERN_NullRecord);
            if (response.IsSuccessStatusCode) {
                _BANK_STATEMENT_PATTERN_Record_List = await response.Content.ReadFromJsonAsync<List<BANK_STATEMENT_PATTERN_Record>>() ?? [];
            }

            response = await Http.PostAsJsonAsync(@"https://localhost:7062/BANK_STATEMENT/SelectAll_CustomRecord", _BANK_STATEMENT_Field_List);
            if (response.IsSuccessStatusCode) {
                PropertyInfo? propertyInfo = typeof(BANK_STATEMENT_NullRecord).GetProperty(_BANK_STATEMENT_Field_List.First().Value[1..^1]);
                values = (await response.Content.ReadFromJsonAsync<List<BANK_STATEMENT_NullRecord>>() ?? []).Select(x => (string?)propertyInfo!.GetValue(x) ?? string.Empty).Distinct().ToDictionary(x => x, x => _BANK_STATEMENT_PATTERN_BaseRecord.FIELD.Value == BANK_STATEMENT_FIELD_ComboValues.DESCRIPTION.Value ? x : string.Empty);

                if (!string.IsNullOrWhiteSpace(_BANK_STATEMENT_PATTERN_BaseRecord.FIELD.Value)) {
                    Dictionary<Regex, BANK_STATEMENT_PATTERN_Record> patterns = _BANK_STATEMENT_PATTERN_Record_List.ToDictionary(x => new Regex(x.ORIGINAL_VALUE), x => x);
                    if (_BANK_STATEMENT_PATTERN_BaseRecord.FIELD.Value == BANK_STATEMENT_FIELD_ComboValues.DESCRIPTION.Value) {
                        foreach (string value in values.Keys) {
                            List<BANK_STATEMENT_PATTERN_Record> matchedPatterns = patterns.Where(x => x.Key.IsMatch(value)).Select(x => x.Value).ToList();

                            if (matchedPatterns.Count == 0) continue;

                            if (matchedPatterns.Where(x => x.POSITION == PATTERN_POSITION_ComboValues.ALL).Count() > 0) {
                                if (matchedPatterns.Count == 1) {
                                    values[value] = matchedPatterns.First().PATTERN;
                                    continue;
                                }
                                else {
                                    throw new Exception();
                                }
                            }

                            int startCount = matchedPatterns.Where(x => x.POSITION == PATTERN_POSITION_ComboValues.START).Count();
                            if (startCount > 1) throw new Exception();
                            if (startCount == 1) {
                                BANK_STATEMENT_PATTERN_Record start = matchedPatterns.First(x => x.POSITION == PATTERN_POSITION_ComboValues.START);
                                values[value] = Regex.Replace(value, start.ORIGINAL_VALUE, string.Empty);
                            }



                            int endCount = matchedPatterns.Where(x => x.POSITION == PATTERN_POSITION_ComboValues.END).Count();
                            if (endCount > 1) throw new Exception();
                            if (endCount == 1) {
                                BANK_STATEMENT_PATTERN_Record end = matchedPatterns.First(x => x.POSITION == PATTERN_POSITION_ComboValues.END);
                                values[value] = Regex.Replace(values[value], end.ORIGINAL_VALUE, string.Empty);
                            }
                        }
                    }
                    else {
                        foreach (string value in values.Keys) {
                            values[value] = patterns.Where(x => x.Key.IsMatch(value)).Select(x => x.Value.PATTERN).SingleOrDefault() ?? string.Empty;
                        }
                    }
                }
            }
        }
        catch (Exception ex) {
            Console.WriteLine(ex);
        }
    }

    private void OnChangePatternPosition(ChangeEventArgs changeEventArgs) {
        _BANK_STATEMENT_PATTERN_BaseRecord.POSITION = new(changeEventArgs.Value?.ToString() ?? string.Empty);
    }

    private async Task SavePattern() {
        BANK_STATEMENT_PATTERN_BaseRecord recordWithRegex = _BANK_STATEMENT_PATTERN_BaseRecord.Clone();
        // string pattern = @"[^a-zA-Z0-9\s]";
        // recordWithRegex.ORIGINAL_VALUE = Regex.Replace(recordWithRegex.ORIGINAL_VALUE, pattern, @"\$&");

        switch (_BANK_STATEMENT_PATTERN_BaseRecord.POSITION.Value) {
            case PATTERN_POSITION_ComboValues._ALL:
                recordWithRegex.ORIGINAL_VALUE = $"^{recordWithRegex.ORIGINAL_VALUE}$";
                break;
            case PATTERN_POSITION_ComboValues._START:
                recordWithRegex.ORIGINAL_VALUE = $"^{recordWithRegex.ORIGINAL_VALUE}";
                break;
            case PATTERN_POSITION_ComboValues._MIDDLE:
                break;
            case PATTERN_POSITION_ComboValues._END:
                recordWithRegex.ORIGINAL_VALUE = $"{recordWithRegex.ORIGINAL_VALUE}$";
                break;
        }

        HttpResponseMessage response = await Http.PostAsJsonAsync(@"https://localhost:7062/BANK_STATEMENT_PATTERN/Insert", recordWithRegex);
        if (response.IsSuccessStatusCode) {
            await OnChangeSelectedField(null);
        }
    }
}
