using EMMA.Commons;
using Microsoft.Extensions.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Text;

namespace %%NAME_SPACE%% {
	public class %%TABLE_NAME%%_Query(IConfiguration configuration) : QueryBase(configuration) {
		private const string TableName = "%%TABLE_NAME_PC%%";
		private const string TableNameDB = "%%TABLE_NAME%%";

		#region Select
		#region SelectAll
		public List<%%TABLE_NAME%%_Record> SelectAll() {
			using SqlConnection connection = new(connectionString);

			List<%%TABLE_NAME%%_Record> output = [];
			try {
				connection.Open();

				string query = $"SELECT * FROM %%TABLE_NAME%%";
				using (SqlCommand command = new(query, connection)) {
					SqlDataReader reader = command.ExecuteReader();
					while (reader.Read()) {
                        output.Add(ReadRecord(reader));
					}
				}

				connection.Close();
			}
			catch (Exception ex) {
				connection.Close();
				throw new Exception(ex.Message);
			}

			return output;
		}

		public List<%%TABLE_NAME%%_NullRecord> SelectAll(List<%%TABLE_NAME%%_Field>? fields = null) {
			using SqlConnection connection = new(connectionString);

			List<%%TABLE_NAME%%_NullRecord> output = [];
			try {
				connection.Open();

                StringBuilder selectFields = new(string.Empty);
                if (fields == null || fields.Count == 0) fields = %%TABLE_NAME%%_Field.GetAllFields();
                foreach (%%TABLE_NAME%%_Field field in fields) {
                    selectFields.Append($"{field.Value}, ");
                }

				string query = $"SELECT {selectFields.ToString()[..^2]} FROM %%TABLE_NAME%%";
				using (SqlCommand command = new(query, connection)) {
					SqlDataReader reader = command.ExecuteReader();
					while (reader.Read()) {
                        output.Add(ReadNullRecord(reader, fields));
					}
				}

				connection.Close();
			}
			catch (Exception ex) {
				connection.Close();
				throw new Exception(ex.Message);
			}

			return output;
		}
		#endregion

        #region SelectWithSimpleCriteria
        public List<%%TABLE_NAME%%_Record> SelectWithSimpleCriteria(%%TABLE_NAME%%_NullRecord nullRecord) {
            using SqlConnection connection = new(connectionString);

            List<%%TABLE_NAME%%_Record> output = [];
            try {
                connection.Open();

                StringBuilder query = new($"SELECT * FROM %%TABLE_NAME%% WHERE ");
                List<SqlParameter> parameters = [];

                CheckNullRecord(nullRecord, query, parameters);

                if (parameters.Count == 0) return SelectAll();

                using (SqlCommand command = new(query.ToString(), connection)) {
                    SqlDataReader reader = command.ExecuteReader();
                    while (reader.Read()) {
                        output.Add(ReadRecord(reader));
                    }
                }

                connection.Close();
            }
            catch (Exception ex) {
                connection.Close();
                throw new Exception(ex.Message);
            }

            return output;
        }

        public List<%%TABLE_NAME%%_NullRecord> SelectWithSimpleCriteria(%%TABLE_NAME%%_NullRecord nullRecord, List<%%TABLE_NAME%%_Field>? fields = null) {
            using SqlConnection connection = new(connectionString);

            List<%%TABLE_NAME%%_NullRecord> output = [];
            try {
                connection.Open();

                StringBuilder selectFields = new(string.Empty);
                if (fields == null || fields.Count == 0) fields = %%TABLE_NAME%%_Field.GetAllFields();
                foreach (%%TABLE_NAME%%_Field field in fields) {
                    selectFields.Append($"{field.Value}, ");
                }

                StringBuilder query = new($"SELECT {selectFields.ToString()[..^2]} FROM %%TABLE_NAME%% WHERE ");
                List<SqlParameter> parameters = [];

                CheckNullRecord(nullRecord, query, parameters);

                if (parameters.Count == 0) return SelectAll(fields);

                using (SqlCommand command = new(query.ToString(), connection)) {
                    SqlDataReader reader = command.ExecuteReader();
                    while (reader.Read()) {
                        output.Add(ReadNullRecord(reader, fields));
                    }
                }

                connection.Close();
            }
            catch (Exception ex) {
                connection.Close();
                throw new Exception(ex.Message);
            }

            return output;
        }
        #endregion
		#endregion
		
		#region Update
		#region UpdateByKey
		public void UpdateByKey(int id, %%TABLE_NAME%%_NullRecord record) {
			UpdateByKey(null, null, false, id, record);
		}

		public void UpdateByKey(SqlConnection? connection, SqlTransaction? transaction, bool keepAlive_transaction, %%ID_TYPE%% id, %%TABLE_NAME%%_NullRecord nullRecord) {
			if (transaction != null && (connection == null || connection.State != ConnectionState.Open)) {
				throw new Exception();
			}

			connection ??= new(connectionString);
			ConnectionState initialConnectionState = connection.State;

			try {
				StringBuilder query = new($"UPDATE %%TABLE_NAME%% SET ");
				List<SqlParameter> parameters = [];

                CheckNullRecord(nullRecord, query, parameters);

				query.Append(" WHERE ID = @ID");
				parameters.Add(new SqlParameter("@ID", id));

				SqlCommand command = new(query.ToString(), connection);
				command.Parameters.AddRange([.. parameters]);
				if (transaction != null) command.Transaction = transaction;

				if (initialConnectionState != ConnectionState.Open) connection.Open();

				command.ExecuteNonQuery();
				if (transaction != null && !keepAlive_transaction)
					transaction.Commit();

				if (initialConnectionState != ConnectionState.Open) connection.Close();
			}
			catch (Exception ex) {
				transaction?.Rollback();

				connection.Close();
				throw new Exception(ex.Message);
			}
		}
		#endregion
		#endregion
		
		#region Insert
		public %%TABLE_NAME%%_Id Insert(%%TABLE_NAME%%_BaseRecord record) {
			return Insert(null, null, false, record);
		}

		public %%TABLE_NAME%%_Id Insert(SqlConnection? connection, SqlTransaction? transaction, bool keepAlive_transaction, %%TABLE_NAME%%_BaseRecord record) {
			if (transaction != null && (connection == null || connection.State != ConnectionState.Open)) {
				throw new Exception();
			}

			connection ??= new(connectionString);
			ConnectionState initialConnectionState = connection.State;

			try {
				StringBuilder query = new($"INSERT INTO %%TABLE_NAME%% OUTPUT INSERTED.ID VALUES (");
				List<SqlParameter> parameters = [];

%%INSERT_FIELD%%
				query.Length -= 2;

				query.Append(")");

				SqlCommand command = new(query.ToString(), connection);
				command.Parameters.AddRange([.. parameters]);
				if (transaction != null) command.Transaction = transaction;

				if (initialConnectionState != ConnectionState.Open) connection.Open();

				%%TABLE_NAME%%_Id id = new((%%ID_TYPE%%)command.ExecuteScalar());
				if (transaction != null && !keepAlive_transaction)
					transaction.Commit();

				if (initialConnectionState != ConnectionState.Open) connection.Close();

				return id;
			}
			catch (Exception ex) {
				transaction?.Rollback();

				connection.Close();
				throw new Exception(ex.Message);
			}
		}
		#endregion

        #region Common
        private static void CheckNullRecord(%%TABLE_NAME%%_NullRecord nullRecord, StringBuilder query, List<SqlParameter> parameters) {
%%CHECK_NULL_RECORD%%
            query.Length -= 2;
        }

        private static %%TABLE_NAME%%_Record ReadRecord(SqlDataReader reader) {
			%%TABLE_NAME%%_Record record = new();
			int i = 0;

%%READ_RECORD%%

            return record;
        }

        private static %%TABLE_NAME%%_NullRecord ReadNullRecord(SqlDataReader reader, List<%%TABLE_NAME%%_Field> fields) {
			%%TABLE_NAME%%_NullRecord record = new();
			int i = 0;

%%READ_NULL_RECORD%%

            return record;
        }
        #endregion
	}
}
