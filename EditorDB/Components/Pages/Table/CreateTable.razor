@page "/createTable"
@using System.Data.SqlClient
@using EditorDB.Classes
@using EditorDB.Classes.BusinessValues
@using EditorDB.Components.Pages.Table.Common
@using EditorDB.Components.Pages.Table.Common.Create
@rendermode InteractiveServer

@inject Services.MainService mainService
<head>
	<link href="css/TableStyle.css" rel="stylesheet" />
</head>

<div>
	<FormTitle Title="Create table"></FormTitle>
	<table>
		<tr>
			<td class="TD_TableLabel">Table name</td>
			<td class="TD_TableField"><input id="newTableName" type="text" autocomplete="off" @bind="tableName" /></td>
			<td class="TD_TableLabel">Description</td>
			<td class="TD_TableField"><input id="newTableName" type="text" class="INP_TableDescription" autocomplete="off" @bind="tableDescription" /></td>
			<td class="TD_TableLabel">Short description</td>
			<td class="TD_TableField"><input id="newTableName" type="text" class="INP_TableDescription" autocomplete="off" @bind="tableShortDescription" /></td>
		</tr>
	</table>
	<table class="TBL_MainTable">
		<tr>
			<th></th>
			<th>Field name</th>
			<th>Nullable</th>
			<th>Category</th>
			<th>Type</th>
			<th>Length</th>
			<th>Integer digits</th>
			<th>Decimal digits</th>
		</tr>
		<tr>
			<td>
				<input type="checkbox" checked />
			</td>
			<td>ID</td>
			<td></td>
			<td>Integer</td>
			<td>
				<select @bind="fields[0].Type">
					@foreach (BV_DataType.Type value in BV_DataType.Integer.GetValues()) {
						<option value="@value.Value">@value.Name</option>
					}
				</select>
			</td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		@foreach (var field in fields.Skip(1).Where(x => x.Index < 1000).OrderBy(x => x.Index)) {
			<tr>
				<td>
					<input type="button" value="▲" @onclick="@(x => MoveUp(field.Index))">
					<input type="button" value="+" @onclick="@(x => AddField(field.Index + 1))">
					<input type="button" value="▼" @onclick="@(x => MoveDown(field.Index))">
				</td>
				<td>
					<input id="@("fieldName" + field.Index)" type="text" @bind="@field.Name" />
				</td>
				<td><input type="checkbox" @bind="@field.Nullable" /></td>
				<td>
					<select @bind="@field.Category">
						<option value=""></option>
						@foreach (BV_DataType.Type value in BV_DataType.Category.GetValues()) {
							<option value="@value.Value">@value.Name</option>
						}
					</select>
				</td>
				<td>
					<select @bind="@field.Type">
						<option value=""></option>
						@foreach (BV_DataType.Type value in GetFieldTypeList(field)) {
							<option value="@value.Value">@value.Name</option>
						}
					</select>
				</td>
				<td>
					@if (field.Category == BV_DataType.Category.String && !string.IsNullOrWhiteSpace(field.Type)) {
						<input type="text" @bind=@field.Length />
					}
				</td>
				<td>
					@if (field.Category == BV_DataType.Category.Decimal && !string.IsNullOrWhiteSpace(field.Type)) {
						<input type="text" @bind=@field.IntegerDigits />
					}
				</td>
				<td>
					@if (field.Category == BV_DataType.Category.Decimal && !string.IsNullOrWhiteSpace(field.Type)) {
						<input type="text" @bind=@field.DecimalDigits />
					}
				</td>
			</tr>
		}
		@foreach (var field in fields.Where(x => x.Index >= 1000).OrderBy(x => x.Index)) {
			<tr>
				<td><input type="checkbox" @bind="field.Enabled" /></td>
				<td>@field.Name</td>
				<td></td>
				<td>@field.Category</td>
				<td>@field.Type</td>
				<td></td>
				<td></td>
				<td></td>
			</tr>
		}
	</table>

	<input type="button" value="Save" @onclick="Save_Click">
</div>

@code {
	string tableName = string.Empty;
	string tableDescription = string.Empty;
	string tableShortDescription = string.Empty;
	List<FieldData> fields = new();

	protected override void OnInitialized() {
		base.OnInitialized();
		fields.Add(new(0, "ID", false, BV_DataType.Category.Integer, BV_DataType.Integer.Int));
		fields.Add(new(1));
		fields.Add(new(1000, "INS_DATE", false, BV_DataType.Category.DateTime, BV_DataType.DateTime_.Date));
		fields.Add(new(1001, "INS_TIME", false, BV_DataType.Category.DateTime, BV_DataType.DateTime_.Time));
		fields.Add(new(1002, "INS_INFO", false, BV_DataType.Category.String, BV_DataType.String.Varchar, 40));
		fields.Add(new(1003, "UPD_DATE", false, BV_DataType.Category.DateTime, BV_DataType.DateTime_.Date));
		fields.Add(new(1004, "UPD_TIME", false, BV_DataType.Category.DateTime, BV_DataType.DateTime_.Time));
		fields.Add(new(1005, "UPD_INFO", false, BV_DataType.Category.String, BV_DataType.String.Varchar, 40));
	}

	private void MoveUp(int index) {
		if (index == 1) return;

		FieldData field = fields[index];
		FieldData previousField = fields[index - 1];

		field.Index--;
		previousField.Index++;

		fields = fields.OrderBy(x => x.Index).ToList();
	}

	private void MoveDown(int index) {
		if (index == fields.Select(x => x.Index).Where(x => x < 1000).Max()) return;

		FieldData field = fields[index];
		FieldData nextField = fields[index + 1];

		field.Index++;
		nextField.Index--;

		fields = fields.OrderBy(x => x.Index).ToList();
	}

	private void AddField(int index) {
		foreach (FieldData field in fields.Where(x => x.Index >= index && x.Index < 1000)) {
			field.Index++;
		}

		fields.Insert(index, new FieldData(index));
	}

	private List<BV_DataType.Type> GetFieldTypeList(FieldData field) {
		@switch (field.Category) {
			case BV_DataType.Category.String:
				return BV_DataType.String.GetValues();
			case BV_DataType.Category.Integer:
				return BV_DataType.Integer.GetValues();
			case BV_DataType.Category.Decimal:
				return BV_DataType.Decimal_.GetValues();
			case BV_DataType.Category.Binary:
				return BV_DataType.Binary_.GetValues();
			case BV_DataType.Category.Boolean:
				return BV_DataType.Boolean_.GetValues();
			case BV_DataType.Category.DateTime:
				return BV_DataType.DateTime_.GetValues();
			default:
				return new();
		}
	}

	protected void Save_Click() {
		SqlConnection connection = mainService.connection;
		connection.Open();

		SqlTransaction transaction = connection.BeginTransaction();
		try {
			using (SqlCommand command = connection.CreateCommand()) {
				command.Transaction = transaction;

				tableName = tableName.ToUpper();

				string query = $"CREATE TABLE {tableName} (\n";
				foreach (FieldData field in fields) {
					if (field.Index == 0) {
						query += $"	ID {field.Type} IDENTITY(1,1) NOT NULL,\n";
						continue;
					}

					field.Name = field.Name.ToUpper();
					switch (field.Category) {
						case BV_DataType.Category.Integer:
							query += $"	{field.Name} {field.Type} {(field.Nullable ? "" : "NOT ")}NULL,\n";
							break;
						case BV_DataType.Category.String:
							query += $"	{field.Name} {field.Type}({(field.Length.HasValue ? field.Length : "MAX")}) {(field.Nullable ? "" : "NOT")} NULL,\n";
							break;
						case BV_DataType.Category.DateTime:
							query += $"	{field.Name} {field.Type} {(field.Nullable ? "" : "NOT")} NULL,\n";
							break;
						case BV_DataType.Category.Boolean:
							query += $"	{field.Name} {field.Type} {(field.Nullable ? "" : "NOT")} NULL,\n";
							break;
						case BV_DataType.Category.Decimal:
							query += $"	{field.Name} {field.Type}({field.IntegerDigits}, {field.DecimalDigits}) {(field.Nullable ? "" : "NOT")} NULL,\n";
							break;
					}
				}

				query += "\n	PRIMARY KEY CLUSTERED (\n";
				query += "		ID ASC\n";
				query += "	)\n";
				query += ")\n";

				query += $"\nINSERT INTO SYST_TABLE VALUES ('{tableName}', '{tableDescription}', '{tableShortDescription}');\n\n";

				foreach (FieldData field in fields) {
					query += $"INSERT INTO SYST_COLUMN VALUES ('{tableName}', '{field.Name}', '', '');\n";
				}

				command.CommandText = query;
				command.ExecuteNonQuery();
			}

			transaction.Commit();
			connection.Close();
		}
		catch (Exception ex) {
			transaction.Rollback();
			connection.Close();
			throw new Exception($"Errore while creating table {tableName}: {ex.Message}");
		}

		mainService.Update();
	}
}
